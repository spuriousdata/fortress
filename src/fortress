#!/bin/sh

: ${FTPHOST:=http://ftp.freebsd.org/pub/FreeBSD/releases/$(uname -m)}
: ${LIBDIR:=/usr/local/lib/fortress}
: ${LOCALCONF_DIR:=/usr/local/etc/fortress}

SETS="base.txz lib32.txz src.txz"

PV=$(which pv)

INSTALL_CONFIG=/usr/local/etc/fortress.conf
CONFIG=$INSTALL_CONFIG

TRUE=0
FALSE=1


stderr()
{
	echo $@ >&2
}

usage()
{
	stderr $0 create "[jailname]"
	stderr $0 destroy "[jailname]"
	stderr $0 start "[jailname]"
	stderr $0 stop "[jailname]"
	stderr $0 restart "[jailname]"
	stderr $0 update "[jailname]"
	stderr $0 console "[jailname]"
	stderr $0 etcupdate "[[jailname]|[jailname] [jailname] ...]"
	stderr $0 rfs "[jailname] #rewrite fstab"
	stderr $0 rjc "[jailname] #rewrite jail.conf"
	stderr $0 upgrade
	stderr $0 list
	stderr $0 startall
	stderr $0 stopall
}

setup()
{
	needsroot

	zfs list $DATASET > /dev/null 2>&1
	if [ $? -ne 0 ]; then
		if confirm_prompt false "fortress dataset '$DATASET' does not exist. Should I create it?"; then
			stderr Creating $DATASET
			checkrc zfs create -po mountpoint=$MOUNTPOINT $DATASET
		else
			stderr Need to create dataset $DATASET
			exit 1
		fi
	fi


	FS="jails sets/$RELEASE release/$RELEASE/root"
	
	for F in $FS
	do
		zfs list $DATASET/$F > /dev/null 2>&1
		if [ $? -ne 0 ]; then 
			stderr Creating $DATASET/$F
			checkrc zfs create -p $DATASET/$F
		fi
	done

	MP=$(mp $DATASET/sets/$RELEASE)
	RMP=$(mp $DATASET/release/$RELEASE)
	if [ "x$MP" = "x" ]; then
		stderr "MP Undefined, something bad happened"
		exit 1
	fi
	for SET in $SETS
	do
		if [ ! -f $MP/$SET ]; then
			stderr Fetching $MP/$SET
			checkrc fetch -o $MP/$SET $FTPHOST/$RELEASE/$SET
		fi
	done
	
	for SET in $SETS
	do
		if [ -f $RMP/.fortress_extracted_$SET ]; then
			continue
		fi

		PROGBAR="cat"
		if [ ! -z ${PV:+is_set} ]; then
			PROGBAR="$PV -s $(stat -f %z $MP/$SET)"
		fi

		stderr Extracting $MP/$SET in $RMP/root
		cat $MP/$SET | $PROGBAR | tar -C $RMP/root -xJf-
		
		touch $RMP/.fortress_extracted_$SET
	done
	
	if [ ! -d $RMP/root/etcupdate ]; then
		mkdir $RMP/root/etcupdate
	fi
	
	stderr Checking for $RMP/root/etcupdate
	if [ ! -f $RMP/root/etcupdate/etcupdate-$RELEASE.tbz ]; then
		stderr Creating etcupdate-$RELEASE.tbz
		mount -t devfs devfs $RMP/root/dev
		chroot $RMP/root etcupdate build /etcupdate/etcupdate-$RELEASE.tbz
		umount $RMP/root/dev
	fi
	stderr Fortress setup complete
	touch $(mp $DATASET)/.fortress_setup_complete
}

create()
{
	needsroot

	local name=${1:?jail name is required}

	load_local_overrides $name
	
	zfs list $DATASET/jails/$name > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		stderr "Jail $name already exists"
		return
	fi
	
	echo Creating jail dataset
	zfs create $DATASET/jails/$name
	zfs create $DATASET/jails/$name/root
	
	local MP=$(mp $DATASET/jails/$name)
	
	echo Creating jail root directories
	for _d in $MOUNT; do
		mkdir -p $MP/root/$_d
	done
	
	local RMP=$(mp $DATASET/release/$RELEASE/root)

	echo Copying /etc
	cd $RMP/etc && find . | cpio -dp --quiet $MP/root/etc

	echo Copying /root
	cd $RMP/root && find . | cpio -dp --quiet $MP/root/root

	if [ -f /etc/localtime ]; then
		echo Copying /etc/localtime
		cp /etc/localtime $MP/root/etc
	else
		stderr /etc/localtime does not exist
	fi

	echo Creating /etc/rc.conf
	cat > $MP/root/etc/rc.conf <<EOF
hostname=$name
cron_flags="-J 15"

# Disable Sendmail by default
sendmail_enable="NONE"
sendmail_submit_enable="NO"
sendmail_outbound_enable="NO"
sendmail_msp_queue_enable="NO"

# Run secure syslog
syslogd_flags="-c -ss"
EOF

	local OLDIFS=$IFS
	export IFS=
	echo "$RC_CONF" | while read -r line; do
		sysrc -f $MP/root/etc/rc.conf $line
	done
	export IFS=$OLDIFS

	echo Creating /etc/resolv.conf
	if [ ! -z ${RESOLV_CONF:+is_set} ]; then
		cat > $MP/root/etc/resolv.conf <<EOF
$RESOLV_CONF
EOF
	fi
	
	echo Extracting etcupdate-$RELEASE.tbz
	mount_jail $MP/root
	chroot $MP/root etcupdate extract -t /etcupdate/etcupdate-$RELEASE.tbz
	umount_jail $MP/root

	echo Writing jail.conf
	create_jailconf $name $MP 


	echo Writing fstab
	create_fstab $name $RMP $MP

	echo Jail created
}

rewrite_jail_conf()
{
	needsroot

	local name=${1:?jail name is required}
	MP=$(mp $DATASET/jails/$name)

	echo Writing jail.conf
	create_jailconf $name $MP 
}

rewrite_fstab()
{
	needsroot

	local name=${1:?jail name is required}
	local RMP=$(mp $DATASET/release/$RELEASE/root)
	local MP=$(mp $DATASET/jails/$name)

	echo Writing fstab
	create_fstab $name $RMP $MP
}

destroy()
{
	needsroot

	local name=${1:?jail name is required}

	jls -j $name >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		stop $name
	fi
	
	MP=$(mp $DATASET/jails/$name)
	
	if confirm_prompt false "Are you sure you want to destroy $MP?"; then
		zfs destroy -rf $DATASET/jails/$name
	fi

	local cfg=/usr/local/etc/fortress/$name.conf
	if [ -f $cfg ]; then
		if confirm_prompt false "Delete $cfg?"; then
			rm $cfg
		fi
	fi

	local fstab=/usr/local/etc/fortress/$name.fstab
	if [ -f $fstab ]; then
		if confirm_prompt false "Delete $fstab?"; then
			rm $fstab
		fi
	fi
}


list()
{
	local _r=$FALSE
	local _s=$FALSE

	while getopts 'rs' c; do
		case $c in
			r)
				_r=$TRUE
				;;
			s)
				_s=$TRUE
				;;
		esac
	done
	shift $((${OPTIND} - 1))

	if [ $_r -eq $TRUE -a $_s -eq $TRUE ]; then
		stderr "-r and -s are mutually exclusive"
		stderr "fortress list [-r|-s]"
		stderr "fortress list -r #list only running"
		stderr "fortress list -s #list only stopped"
		exit 2
	fi

	(echo JID IP NAME MOUNTPOINT RUNNING
	get_jail_names mountpoint | while read -r name mp; do
		JID=$(jls -j $name -qn jid 2>/dev/null | cut -f2 -d=)

		if [ "x$JID" != "x" ]; then
			IP=$(jexec $name ifconfig e0b_$name 2>/dev/null | awk '/inet /{print $2}')
			if [ "x$IP" = "x" ]; then
				_ip=$(ip_from_rc_conf $name $mp)
				IP=${_ip:-"??.??.??.??"}
			fi
			RUNNING=yes

			if [ $_r -eq $TRUE ]; then
				echo $JID $IP $name $mp $RUNNING
			fi
		else
			_ip=$(ip_from_rc_conf $name $mp)
			IP=${_ip:-n/a}
			RUNNING=no
			JID=n/a
			
			if [ $_s -eq $TRUE ]; then
				echo $JID $IP $name $mp $RUNNING
			fi
		fi

		if [ $_r -eq $FALSE -a $_s -eq $FALSE ]; then
			echo $JID $IP $name $mp $RUNNING
		fi
	done) | column -t
}

needsjib()
{
	if [ ! -x $JIB ]; then
		stderr "fortress requires $JIB to exist and be executable. If jib exists in a different location, set it in $CONFIG"
		exit 1
	fi
}

start()
{
	needsroot
	needsjib

	local name=${1:?jail name is required}

	if is_running $name; then
		stderr Error: $name is already running
		return 1
	fi

	load_local_overrides $name
	if [ ! -z ${AUTOGEN:+is_set} ]; then
		rewrite_jail_conf $name > /dev/null
		rewrite_fstab $name > /dev/null
	fi

	MP=$(mp $DATASET/jails/$name)
	echo Starting $name...
	jail -qcf $MP/jail.conf
}

stop()
{
	needsroot
	needsjib

	local name=${1:?jail name is required}

	if is_running $name; then
		MP=$(mp $DATASET/jails/$name)
		echo Stopping $name...
		jail -qrf $MP/jail.conf $name
	fi
}

restart()
{
	stop $@
	start $@
}

update()
{
	needsroot

	ZR=$DATASET/release/$RELEASE/root
	R=$(mp $ZR)
	CMD="/usr/sbin/freebsd-update -b $R -d $R/var/db/freebsd-update/ -f $R/etc/freebsd-update.conf --not-running-from-cron"

	zfs list $ZR@pre-update >/dev/null 2>&1
	ret=$?
	if [ $ret -eq 0 ]; then
		local snap_epoch=$(zfs get -pH creation $ZR@pre-update | cut -f3)
		stderr "Error: $ZR@pre-update already exists."
		stderr "  It was created before your last update on $(date -r $snap_epoch)."
		if confirm_prompt true "Should I keep it around?"; then
			local newname="pre-update-$(date -r $snap_epoch -Iseconds)"
			echo Renaming snapshot @pre-update to $ZR@$newname
			echo zfs rename $ZR@pre-update $ZR@$newname
			zfs rename $ZR@pre-update $ZR@$newname
		else
			stderr "To continue, you must first delete the old backup snapshot."
			if confirm_prompt true "Should I delete it now?"; then
				zfs destroy -v $ZR@pre-update
			fi
		fi

	fi

	zfs snap $ZR@pre-update
	ret=$?
	if [ $ret -ne 0 ]; then
		stderr "Error taking snapshot"
		exit $ret
	fi

	PAGER=cat $CMD fetch 
	$CMD install 
	if [ $? -eq 0 ]; then
		# rebuild etcupdate-$RELEASE.tbz
		mount -t devfs devfs $R/dev
		chroot $R etcupdate build /etcupdate/etcupdate-$RELEASE.tbz
		umount $R/dev
		echo "Updates installed. Run \`$0 etcupdate jail1 jail2 ... jailN\`"
	else
		echo "No updates to install"
	fi
}

upgrade()
{
	needsroot

	if confirm_prompt false "About download and prepare '$RELEASE,' is this correct?"; then
		setup

		if confirm_prompt false "Upgrade all jails to this new version?"; then
			get_jail_names | while read -r jail; do
				local MP=$(mp $DATASET/jails/$jail)
				local was_running=no
				if is_running $jail; then
					was_running=yes
				fi

				stop $jail
				rewrite_fstab $jail
				mount_jail $MP/root
				_etcupdate true $jail
				umount_jail $MP/root

				if [ $was_running = "yes" ]; then
					start $jail
				fi

			done
		else
			stderr "You _must_ run \`$0 etcupdate jail1 jail2 ... jailN\` manually now for any jail that will be upgraded"
		fi
	fi
}

_etcupdate()
{
	local suppress=$1; shift

	if [ $# -eq 0 ]; then
		stderr "Usage: _etcupdate [true|false] jail1 jail2...jailN"
	fi

	for jail in $@
	do
		local MP=$(mp $DATASET/jails/$jail)
		chroot $MP/root etcupdate -F -t /etcupdate/etcupdate-$RELEASE.tbz
		chroot $MP/root etcupdate resolve
	done

	if [ "x$suppress" = "xfalse" ]; then
		echo "etcupdate complete. Restart jail(s)"
	fi
}

startall()
{
	get_jail_names mountpoint | while read -r jail mp; do
		if [ -f $mp/NOAUTO ]; then
			stderr "Skipping $jail because $mp/NOAUTO exists"
			continue
		else
			start $jail
		fi
	done
}

stopall()
{
	get_jail_names | while read -r jail; do
		jls -j $jail >/dev/null 2>&1
		if [ $? -eq 0 ]; then
			stop $jail
		else
			echo "$jail not running"
		fi
	done
}

main()
{
	while getopts ':f:X' c; do
		case $c in
			f)
				CONFIG="$OPTARG"
				;;
			X)
				set -x
				;;
			:)
				stderr dunno how we got here
				exit 2
				;;
			\?)
				if [ "$OPTARG" = "?" ]; then
					usage
					exit 0
				else
					printf 'fortress: Uknown flag %s\n' "$OPTARG" >&2
					usage
					exit 2
				fi
				;;
		esac
	done
	shift $((${OPTIND} - 1))

	if [ -f $CONFIG ]; then
		. $CONFIG
	else
		# stderr() is not defined yet, so we can't call it
		echo "No configuration found. Copy $INSTALL_CONFIG.sample to $INSTALL_CONFIG and edit it before running fortress" >&2
		exit 1
	fi

	. $LIBDIR/utils.sh

	if setupcomplete; then
		case $1 in 
			setup)
				echo "Setup already complete"
				usage
				;;
			create)
				shift
				create $@
				;;
			destroy)
				shift
				destroy $@
				;;
			list)
				shift
				list $@
				;;
			start)
				shift
				start $@
				;;
			startall)
				shift
				startall $@
				;;
			stopall)
				shift
				stopall $@
				;;
			stop)
				shift
				stop $@
				;;
			restart)
				shift
				restart $@
				;;
			restartall)
				shift
				stopall $@
				startall $@
				;;
			update)
				shift
				update $@
				;;
			upgrade)
				shift
				upgrade $@
				;;
			etcupdate)
				shift
				_etcupdate false $@
				;;
			console)
				shift
				if ! is_running $1; then
					start $1
				fi
				jexec -l $1 /bin/csh
				;;
			rjc)
				shift
				rewrite_jail_conf $@
				;;
			rfs)
				shift
				rewrite_fstab $@
				;;
			*)
				if [ ! -z $1 ]; then 
					stderr unknown command $1
				fi
				usage
				;;
		esac
	else
		if [ "x$1" = "xsetup" ]; then
			shift
			setup $@
		else
			stderr
			stderr Configure $CONFIG then run \'$0 setup\'
			stderr 
		fi
	fi
}

main $@
