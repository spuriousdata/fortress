confirm_prompt()
{
	local default=$1
	local question=$2
	local answers="[Y/n]"

	if [ "x$default" != "xtrue" ]; then
		answers="[y/N]"
	fi

	echo -n $question $answers " "

	confirm $default
	return $?
}

confirm()
{
	local default=$1

	read RESP
	case $RESP in
		"")
			if [ "x$default" = "xtrue" ]; then
				return 0
			else
				return 1
			fi
			;;
		[Yy]|[Yy][Ee][Ss])
			return 0
			;;
		*)
			return 1
			;;
	esac
}

load_local_overrides()
{
	local name=${1:?jail name is required}
	local localconf=$LOCALCONF_DIR/$name.conf
	local localfstab=$LOCALCONF_DIR/$name.fstab

	if [ ! -f $localconf ]; then
		if confirm_prompt true "Missing $localconf. Create it?"; then
			cp $LOCALCONF_DIR/SAMPLE.conf $localconf
			cp $LOCALCONF_DIR/SAMPLE.fstab $localfstab
			$EDITOR $localconf
		else
			stderr Cannot continue. Create $localconf -- it should contain zero or more overrides of variables from $CONFIG.
			exit 1
		fi
	fi

	sync
	. $localconf
}

create_fstab()
{
	local name=$1
	local RMP=$2 
	local MP=$3
	local localfstab=$LOCALCONF_DIR/$name.fstab
	local EXTRA=""

	if [ -f $localfstab ]; then
		EXTRA=$(cat $localfstab | stripall | awk -v pfx=$MP/root '!/^#XX/{d=$2; if (substr(d, 1, 1) == "/") { d = substr(d, 2, length(d)-1) }; print $1 " " pfx "/" d " " $3 " " $4 " " $5 " " $6}')
	fi

	load_local_overrides $name

	echo "# This file is autogenerated by fortress. DO NOT EDIT!!!" > $MP/fstab
	echo "# To add custom mounts, create $localfstab and put them in there." >> $MP/fstab

	(echo "#Device Mountpoint FStype Options Dump Pass"
	 for _d in $MOUNT; do
		echo $RMP/$_d $MP/root/$_d nullfs ro 0 0
	 done
	 echo "$EXTRA") | column -t >> $MP/fstab
}

create_jailconf()
{
	local name=$1
	local mountpoint=$2

	load_local_overrides $name

	local pairs=""
	local x=0
	local i=""
	for i in $PUBLIC_IFACE; do
		if [ -z ${pairs:+is_set} ]; then
			pairs="e${x}b_\$name"
		else
			pairs="$pairs, e${x}b_\$name"
		fi
		x=$(( $x+1 ))
	done

	EJC=$(echo $EXTRA_JAIL_CONF | stripall | indent | pr -to8 -i8)

	cat > $mountpoint/jail.conf <<EOF
$name {
	host.hostname = "\$name.$DOMAIN";
	path = "$mountpoint/root";

	mount.devfs;
	mount.fstab = "$mountpoint/fstab";

	vnet;
	vnet.interface = ${pairs};

	exec.system_user = "root";
	exec.jail_user = "root";
	
	exec.clean;
	exec.start = "/bin/sh /etc/rc";
	exec.stop = "/bin/sh /etc/rc.shutdown";
	exec.consolelog = "/var/log/jail_\${name}_console.log";
	exec.prestart += "$JIB addm \${name} $PUBLIC_IFACE >/dev/null";
	exec.poststop += "$JIB destroy \${name}";

$EJC
}
EOF
}

stripall()
{
	# strip leading and trailing whitespace and trailing newlines
	sed -e :a -e 's/^[ \t]*//' -e 's/[ \t]*$//' -e '/^\n*$/N;/\n$/ba'
}

get_jail_names()
{
	local args=""
	local dataset=$DATASET

	if [ ! -z ${1:+is_set} ]; then
		args=",$1"
	fi
	zfs list -r -d1 -oname$args $dataset/jails | tail -n+3 | sed "s@$dataset/jails/@@"
}

needsroot()
{
	if [ ${NOROOT:-0} -eq 1 ]; then
		return
	fi

	if [ $(id -u) -ne 0 ]; then
		stderr "Command requires root privileges"
		exit
	fi
}

warn()
{
	if [ ${NOWARN:-0} -ne 1 ]; then
		stderr $1
	fi
}

checkrc()
{
	if [ ${VERBOSE:-0} -eq 1 ]; then
		echo $*
	fi

	$*
	local rc=$?
	if [ $rc -ne 0 ]; then
		stderr Error running $*
		exit $rc
	fi
}

mp()
{
	zfs get -H mountpoint $1 2>/dev/null | awk '{print $3}'
}

mount_jail()
{
	local MP=$1
	local SMP=$(mp $DATASET/release/$RELEASE/root)
	
	if [ ! -e $MP/var/ports ]; then
		mkdir -p $MP/var/ports
		mkdir -p $MP/var/ports/distfiles
		mkdir -p $MP/var/ports/packages
	fi
	
	if [ ! -e $MP/var/db ]; then
		mkdir $MP/var/db
	fi
	
	if [ ! -e $MP/compat ]; then
		mkdir $MP/compat
	fi
	
	if [ ! -e $MP/usr/obj ]; then
		mkdir -p $MP/usr/obj
	fi
	
	for _d in $MOUNT; do
		mount -t nullfs -o ro $SMP/$_d $MP/$_d
	done
	
	if [ ! -d $MP/dev ]; then
		mkdir $MP/dev
	fi
	mount -t devfs devfs $MP/dev
	
	if [ ! -d $MP/tmp ]; then
		mkdir $MP/tmp
		chmod 1777 $MP/tmp
	fi
	mount -t tmpfs tmpfs $MP/tmp
}

umount_jail()
{
	local MP=$1
	
	for _d in $MOUNT; do
		umount $MP/$_d
	done
	umount $MP/dev
	umount $MP/tmp
}

setupcomplete()
{
	MP=$(mp $DATASET)
	if [ -f $MP/.fortress_setup_complete ]; then
		return 0
	else
		return 1
	fi
}

is_running()
{
	local jail=$1

	jls -j $jail >/dev/null 2>&1
	if [ $? -eq 0 ]; then
		return 0
	else
		return 1
	fi
}

ip_from_rc_conf()
{
	local name=${1:?jail name is required}
	local mp=${2:?mountpoint is required}

	if [ -f $mp/root/etc/rc.conf.d/network ]; then
		IP=$(cat $mp/root/etc/rc.conf $mp/root/etc/rc.conf.d/network | grep e0b_$name | awk 'match($0, /inet [\.0-9]+/){print substr($0, RSTART+5, RLENGTH-5)}')
	else
		IP=$(cat $mp/root/etc/rc.conf | grep e0b_$name | awk 'match($0, /inet [\.0-9]+/){print substr($0, RSTART+5, RLENGTH-5)}')
	fi
	echo $IP
}

